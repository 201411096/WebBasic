--------------------------------------------------
javascript API

1. geolocation API
2. Canvas : 동적인 이미지
3. File API : 로컬 파일 시스템
4. Web Storage : 로컬 데이터 저장시
	ㄴ session storage
	ㄴ local storage
5. Indexd Database : Javascript 객체 관리 시(키/값의 세트로)
6. Web Workers : 백그라운드에서 JavaScript 병렬 실행시 (쓰레드..?)
7. Web Sockets
--------------------------------------------------
크롬 개발자 도구
1. Application 
	ㄴ Session Storage
	ㄴ IndexedDB : key-value 구조로 데이터 관리, B-Tree 데이터 구조를 가짐
		ㄴ B-Tree : 확장된 이진트리 구조(자식 노드의 최대 숫자가 2보다 큼)
--------------------------------------------------
스크립트 안쪽 부분을 주석으로 감싸는 이유
	ㄴ js를 처리하지 않는 브라우저에서는 주석으로 처리하기 위함
--------------------------------------------------
null <-> undefined 차이점
--------------------------------------------------
== <-> === 차이점

1. ==의 경우 값만 같으면 같다고 나옴
2. ===의 경우 값과 자료형도 같아야 나와야 함
--------------------------------------------------
소수점 계산 비교시 주의

1. 비교할 내용을 전부 정수로 만들어서 비교?
ex) document.writeln(0.2 *3 == 0.6); - x
    document.writeln(0.2 *3  *10 == 0.6*10); - x
    document.writeln(0.2 *10  *3 == 0.6*10); - o
--------------------------------------------------
Array.sort(), Array.reverse()

1. Array.reverse()는 내림차순으로 정렬하는게 아님(단순히 요소를 거꾸로 배치 / 원래 배열의 요소가 직접적으로 변경됨)
--------------------------------------------------
Array 혹은 Object 선언 시

var a = new Array();
var a = new Object();
--------------------------------------------------
Array의 추가 삭제
	ㄴ Array.push(배열의 끝에 요소를 추가)
	ㄴ Array.pop(배열의 마지막 요소를 가져온 후에 제거)
	ㄴ Array.shift(배열의 첫번째 요소를 가져온 후에 제거)
	ㄴ Array.delete(배열의 값을 지우지만 그자리가 undefined로 남음) -> pop shift 권장
	ㄴ push와 pop을 같이 사용시 배열을 스택처럼 사용할 수 있음
	ㄴ push와 shift를 같이 사용시 배열을 큐처럼 사용할 수 있음
--------------------------------------------------
변수의 범위
	ㄴ 글로벌 변수 : 스크립트 전체에서 참조 가능
	ㄴ 지역 변수 : 정의된 함수 안에서만 참조 가능

변수 선언시 주의할 점
	ㄴ var 명령을 사용하지 않으면 모두 글로벌 변수로 취급
	ㄴ 지역변수를 선언하려면 반드시 var명령어를 사용해야함

--------------------------------------------------
Object 생성 심화
	ㄴ Object Literal <-> Constructor
--------------------------------------------------
Object Literal Notation, Object Constructor function 사용 예시

// literal notation
const Webstie = {
	'url' : 'http://...',
	'printUrl':function(){
		console.log(this.url);
	};
};

//constructor function
function Website(){
	this.url= 'http://...';
	this.printUrl=function(){
		console.log(this.url);
	};
};

//constructor function_2
function Car(make, model, year) {
  this.make = make;
  this.model = model;
  this.year = year;
}

var mycar = new Car("Eagle", "Talon TSi", 1993);

--------------------------------------------------
javascript 동적 실행

eval()
--------------------------------------------------
script를 head에 사용할 시 windows.onlad=function(){} 으로 감싸주지 않으면 제대로 적용이 되지 않음

귀찮다면 body태그 맨 아랫단에 사용하면 됨
--------------------------------------------------
Indexed DB 와 Storage 비교

많은 데이터를 저장 			<->	최대 10mb만 저장이 가능
index를 이용한 빠른 검색 		<->	오직 String 형태만 저장이 가능
Javascript가 이해하는 어떤 값이라도 저장이 가능
용량 제한은 없으나, HDD 저장소 상태나 브라우저의 상태에 따라 달라짐

작은 규모의 데이터는 Storage를 사용하는 것이 좋고, 큰 데이터는 Indexed DB를 사용하는 것이 유리함
--------------------------------------------------
쿠키와 세션의 차이

저장 위치 : 클라이언트 		<-> 웹 서버
저장 방식 : text   		    <-> Object
만료 시점 : 쿠키 저장시 설정  <-> 브라우저 종료시 삭제(기간 지정 가능)
사용 자원 : 클라이언트 리소스 <-> 웹 서버 리소스
속도		 : 세션보다 빠름 		<-> 쿠키보다 느림
보안      : 세션보다 않좋음   <-> 쿠키보다 좋음
--------------------------------------------------
Web Storage
	localStorage
		ㄴ 직접 지우지 않으면 만료기간이 없음
		ㄴ 도메인마다 별도로 로컬스토리지 생성
		ㄴ windows 객체에  localStorage라는 property가 존재
	sessionStorage
		ㄴ 세션이 끝나면 종료
		ㄴ 브라우저 종료시 세션 종료
		ㄴ 브라우저가 다르면 서로 다른 영역
		ㄴ 도메인마다 별도로 세션스토리지 생성
		ㄴ windows 객체에  sessionStorage property가 존재
--------------------------------------------------
sessionStorage 사용 방법

//세션 저장
sessionStorage.setItem("key", value);

//특정 세션 값 불러오기
sessionStorage.getItem("key");

//특정세션 삭제
sessionStorage.removeItem("key");

//세션 전체 삭제
sessionStorage.clear();
--------------------------------------------------